import os, sys
import time
import sockets_server_api
import env
import signal
import sys

# make parent directory available to import k8sapi
sys.path.insert(1, os.path.join(sys.path[0], '..'))
import k8sapi.api as k8sapi

# loads the traci lib path into the python load path so it can be imported
# https://github.com/wingsweihua/IntelliLight/blob/master/map_computor.py
if 'SUMO_HOME' in os.environ:
    tools = os.path.join(os.environ['SUMO_HOME'], 'tools')
    sys.path.append(tools)
else:
    sys.exit("please declare environment variable 'SUMO_HOME'")
import traci


# ----- functions definition -----
def get_current_time():
    return traci.simulation.getCurrentTime() / 1000


def getMapOfVehicles():
    vehicle_id_list = traci.vehicle.getIDList()
    vehicle_list = []

    for vehicle_id in vehicle_id_list:
        vehicle = {}
        vehicle["id"] = vehicle_id
        vehicle["position"] = traci.vehicle.getPosition(vehicle_id)
        vehicle_list.append(vehicle)
    
    return vehicle_list


def cleanup():
    '''Delete artifacts generated by the script (k8s namespace and pods) and close the traci and sockets APIs'''
    k8sapi.delete_namespace_pods(env.k8sapi_namespace, prefix="car-")
    traci.close()
    sockets_server.stop()


def signal_handler(sig, frame):
    ''''SIGINT (CTRL-C) handler'''
    print('\nYou pressed Ctrl+C!')

    cleanup()

    sys.exit(0)


# write to socket and receive response (can be ignored) on a loop
def handle_CC_socket_connection(stream_request_handler, car_ID):
    return


# ----- main part -----
if __name__ == '__main__':
    sumoBinary = "/home/marcos/Proj/sumo/bin/sumo" #-gui
    sumoCmd = [sumoBinary, "-c", "/home/marcos/Proj/sumonetworks/quickstart/quickstart.sumocfg"]

    k8s_pod_image_name = "car_communication"
    k8s_pod_tag = "latest"

    # maps vehicle IDs to running pods
    running_pods = {}
    pod_limit = 3

    signal.signal(signal.SIGINT, signal_handler)

    # if using GUI, stays here until you press play on the GUI
    traci.start(sumoCmd)
    k8sapi.load_api()

    sockets_server = sockets_server_api.Server(env.host, env.port)
    sockets_server.start()

    time.sleep(5)

    if env.running_kind:
        created = k8sapi.create_namespace_if_inexistent(env.k8sapi_namespace)
        if created:
            # sketchy hack hehe
            os.system(f"kubectl apply -f kind_localhost_fix.yaml --namespace={env.k8sapi_namespace}")

    for step in range(20):
        traci.simulationStep()

        print(f"iteration {step}:")
        vehicle_list = getMapOfVehicles()
        for vehicle in vehicle_list:
            if vehicle['id'] not in running_pods and len(running_pods) < pod_limit:
                new_pod_name = f"{env.car_pods_prefix}{len(running_pods)}"
                running_pods[vehicle['id']] = new_pod_name

                k8sapi.create_pod(
                        new_pod_name,
                        k8s_pod_image_name,
                        k8s_pod_tag,
                        envs={
                            "SERVER_ADDRESS": "dockerhost",
                            "SERVER_PORT": "9999",
                            "POD_NAME": new_pod_name,
                            "PYTHONUNBUFFERED": "1"
                        },
                        namespace=env.k8sapi_namespace)

            # print(f"    {vehicle['id']}: {vehicle['position'][0]}, {vehicle['position'][1]}")

        time.sleep(20)
    
    # debugging sockets server
    # time.sleep(50)
    cleanup()